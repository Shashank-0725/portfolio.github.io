#include <iostream>
#include <vector>
#include <algorithm>  // For std::reverse
using namespace std;

int partition(vector<pair<int, string>>& properties, int low, int high) {
    int pivot = properties[high].first; 
    int i = low - 1; 

    // Reorder the elements based on the pivot
    for (int j = low; j < high; j++) {
        if (properties[j].first <= pivot) {  // If the current price is smaller or equal to pivot
            i++;
            swap(properties[i], properties[j]);
        }
    }
    swap(properties[i + 1], properties[high]);
    return i + 1; 
}

void quickSort(vector<pair<int, string>>& properties, int low, int high) {
    if (low < high) {
        int pivotIndex = partition(properties, low, high); 
        quickSort(properties, low, pivotIndex - 1); 
        quickSort(properties, pivotIndex + 1, high);   
    }
}

void printProperties(const vector<pair<int, string>>& properties) {
    for (const auto& property : properties) {
        cout << "Price: " << property.first << ", Location: " << property.second << endl;
    }
}

int main() 
{
    vector<pair<int, string>> properties = {
        {500000, "LocationA"},
        {300000, "LocationB"},
        {400000, "LocationC"},
        {600000, "LocationD"},
        {200000, "LocationE"}
    };

    quickSort(properties, 0, properties.size() - 1);
    cout << "Sorted Properties (Ascending by Price):" << endl;
    printProperties(properties);

    // Now reverse
    std::reverse(properties.begin(), properties.end());
    cout << "\nSorted Properties (Descending by Price):" << endl;
    printProperties(properties);

    return 0;
}

