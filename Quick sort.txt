#include <iostream>
#include <vector>
using namespace std;

// Partition function
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high]; // Choose the last element as the pivot
    int i = low - 1;       // Index of smaller element

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) { // If current element is smaller than or equal to pivot
            i++;
            swap(arr[i], arr[j]); // Swap arr[i] and arr[j]
        }
    }
    swap(arr[i + 1], arr[high]); // Place pivot in the correct position
    return i + 1;                // Return pivot index
}

// Quick Sort function
void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high); // Partition index

        quickSort(arr, low, pi - 1); // Sort elements before the partition
        quickSort(arr, pi + 1, high); // Sort elements after the partition
    }
}

int main() {
    vector<int> housePrices = {2500000, 1000000, 3000000, 1500000, 4000000}; // Prices in ₹

    cout << "Original house prices (in ₹):" << endl;
    for (int price : housePrices) {
        cout << "₹" << price / 100000 << " lakh ";
    }
    cout << endl;

    // Apply Quick Sort
    quickSort(housePrices, 0, housePrices.size() - 1);

    cout << "\nHouse prices sorted in ascending order (in ₹):" << endl;
    for (int price : housePrices) {
        cout << "₹" << price / 100000 << " lakh ";
    }
    cout << endl;

    return 0;